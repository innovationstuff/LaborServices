<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model <#=        ViewDataTypeName #>
<#
    // "form-control" attribute is only supported for all EditorFor() in System.Web.Mvc 5.1.0.0 or later versions, except for checkbox, which uses a div in Bootstrap
    string boolType = "System.Boolean";
    Version requiredMvcVersion = new Version("5.1.0.0");
    bool isControlHtmlAttributesSupported = MvcVersion >= requiredMvcVersion;
    // The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
    if(IsPartialView) {
#>

<#
    } else if(IsLayoutPageSelected) {
#>

@{
    ViewBag.Title = "<#=            ViewName#>";
<#
        if (!String.IsNullOrEmpty(LayoutPageFile)) {
#>
    Layout = "<#=                LayoutPageFile#>";
<#
        }
#>
}

<#
}                                     
#>


@using (Html.BeginForm())
{
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h4 class="modal-title" id="modalLabel">Create New</h4>
    </div>
    
    <div class="modal-body">
        @Html.AntiForgeryToken()
        <div class="form-horizontal">          
            @Html.ValidationSummary(true)
          

<#
    foreach (PropertyMetadata property in ModelMetadata.Properties) {
        if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation) {

            // If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
            if (property.IsPrimaryKey && IsPropertyGuid(property)) {
                continue;
            }

#>

            <div class="form-group">
<#
            if (property.IsForeignKey) {
#>
            @Html.LabelFor(model => model.<#=                    property.PropertyName #>, "<#=                    GetAssociationName(property) #>", htmlAttributes: new { @class = "control-label col-md-2" })
<#
            }
            else {
#>
            @Html.LabelFor(model => model.<#=                    property.PropertyName #>, htmlAttributes: new { @class = "control-label col-md-2" })
<#
            }
#>
                <div class="col-md-10">
<#
            bool isCheckbox = property.TypeName.Equals(boolType);
            if (property.IsForeignKey) {
#>
                @Html.DropDownList("<#=                    property.PropertyName #>", null, htmlAttributes: new { @class = "form-control" })

@*                    @Html.DropDownListFor(model => model.Sort, SelectListUtility.GetSortList(), "Select a sort value", new { @class = "form-control autocomplete" }) *@


<# 
            } else if (isCheckbox) {
#>
                <div class="checkbox">
<#
                PushIndent("    ");
#>
                @Html.EditorFor(model => model.<#=                    property.PropertyName #>)
<#
            } else if (property.IsEnum && !property.IsEnumFlags) {
#>
                @Html.EnumDropDownListFor(model => model.<#=                    property.PropertyName #>, htmlAttributes: new { @class = "form-control" })
<#
            } else {
#>
                @Html.EditorFor(model => model.<#=                    property.PropertyName #>, new { htmlAttributes = new { @class = "form-control" } })
<#

                #>

@Html.ValidationMessageFor(model => model.ProductName)
</div>
</div>

<div class="form-group">
        @Html.LabelFor(model => model.ProductDescription, new { @class = "control-label col-md-2" })
<div class="col-md-10">
                    @Html.TextAreaFor(model => model.ProductDescription, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ProductDescription)
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Sort, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.Sort, SelectListUtility.GetSortList(), "Select a sort value", new { @class = "form-control autocomplete" })
                    @Html.ValidationMessageFor(model => model.Sort)
                </div>
            </div>
        </div>
    </div>

    <div class="modal-footer">
        @Html.CheckBox("CreateAnother")
        @Html.Label("CreateAnother", "Create another")

        <button type="submit" class="btn btn-primary btn-preload">Create</button>
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
    </div>
}



@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
<h4><#=                    ViewDataTypeShortName #></h4>
        <hr />
<# 
                if (isControlHtmlAttributesSupported) {
#>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
<#        
                } else {
#>
        @Html.ValidationSummary(true)
<#      
                }
#>
<#
                foreach (PropertyMetadata property in ModelMetadata.Properties) {
                    if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation) {

                        // If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
                        if (property.IsPrimaryKey && IsPropertyGuid(property)) {
                            continue;
                        }

#>
        <div class="form-group">
<#
                        if (property.IsForeignKey) {
#>
            @Html.LabelFor(model => model.<#=                                property.PropertyName #>, "<#=                                GetAssociationName(property) #>", htmlAttributes: new { @class = "control-label col-md-2" })
<#
                        } else {
#>
            @Html.LabelFor(model => model.<#=                                property.PropertyName #>, htmlAttributes: new { @class = "control-label col-md-2" })
<#
                        }
#>
            <div class="col-md-10">
<#
                        bool isCheckbox = property.TypeName.Equals(boolType);
                        if (property.IsForeignKey) {
#>
<# 
                            if (isControlHtmlAttributesSupported) {
#>
                @Html.DropDownList("<#=                                    property.PropertyName #>", null, htmlAttributes: new { @class = "form-control" })
<#
                            } else {
#>
                @Html.DropDownList("<#=                                    property.PropertyName #>", String.Empty)
<#
                            }
#>
<#
                        } else  if (isControlHtmlAttributesSupported) {
                            if (isCheckbox) {
#>
                <div class="checkbox">
<#
                                PushIndent("    ");
#>
                @Html.EditorFor(model => model.<#=                                    property.PropertyName #>)
<#
                            } else if (property.IsEnum && !property.IsEnumFlags) {
#>
                @Html.EnumDropDownListFor(model => model.<#=                                    property.PropertyName #>, htmlAttributes: new { @class = "form-control" })
<#
                            } else {
#>
                @Html.EditorFor(model => model.<#=                                    property.PropertyName #>, new { htmlAttributes = new { @class = "form-control" } })
<#
                            } 
                        } else {
#>
                @Html.EditorFor(model => model.<#=                                property.PropertyName #>)
<#
                        }
#>
<# 
                        if (isControlHtmlAttributesSupported) {
#>
                @Html.ValidationMessageFor(model => model.<#=                                property.PropertyName #>, "", new { @class = "text-danger" })
<#        
                        } else {
#>
                @Html.ValidationMessageFor(model => model.<#=                                property.PropertyName #>)
<#      
                        }
#>
<#
                        if (isCheckbox && isControlHtmlAttributesSupported) {
                            PopIndent();
#>
                </div>
<#
                        }
#>
            </div>
        </div>

<#
                    }
                }
#>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<#@ include file="ModelMetadataFunctions.cs.include.t4" #>